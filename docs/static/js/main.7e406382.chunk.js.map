{"version":3,"sources":["logo.svg","components/SimpleModal.js","components/WebAssembly/WebAssemblyLoader.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","SimpleModal","_ref","show","children","showHideClassName","react_default","a","createElement","className","WebAssemblyLoader","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","waitUntilModuleOnDOM","bind","assertThisInitialized","runModule","state","initialized","canvasRef","React","createRef","_this2","moduleMethod","window","moduleName","canvas","current","print","text","console","log","printErr","error","then","finishedModule","setState","setTimeout","script","document","src","body","appendChild","_this3","src_components_SimpleModal","ref","onContextMenu","event","preventDefault","onClick","onClose","requestFullscreen","Component","defaultProps","App","showModule","closeModule","logo","alt","components_WebAssembly_WebAssemblyLoader","isLocalhost","Boolean","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","controller","onUpdate","onSuccess","catch","ReactDOM","render","src_App_0","getElementById","URL","process","href","origin","addEventListener","concat","fetch","response","contentType","headers","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.7e406382.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React from 'react';\n\nimport './SimpleModal.css';\n\nconst SimpleModal = ({ show, children }) => {\n    const showHideClassName = show ? \"modal display-block\" : \"modal display-none\";\n    return (\n      <div className={showHideClassName}>\n        <section className=\"modal-main\">\n          {children}\n        </section>\n      </div>\n    );\n  };\n\nexport default SimpleModal;","import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport SimpleModal from '../SimpleModal';\nimport './WebAssemblyLoader.css';\n\nclass WebAssemblyLoader extends Component {\n    constructor(props) {\n        super(props);\n        this.waitUntilModuleOnDOM = this.waitUntilModuleOnDOM.bind(this);\n        this.runModule = this.runModule.bind(this);\n        this.state = {\n            initialized: false,\n        };\n        this.canvasRef = React.createRef();\n    }\n\n    runModule() {\n        const moduleMethod = window[this.props.moduleName];\n        this.module = {\n            canvas: (() => this.canvasRef.current)(),\n            print: text => console.log(text),\n            printErr: text => console.error(text),\n        };\n        moduleMethod(this.module).then(finishedModule => {\n            this.setState({\n                initialized: true,\n            });\n            this.module = finishedModule;\n        });\n    }\n\n    waitUntilModuleOnDOM() {\n        if(window[this.props.moduleName]) {\n            this.runModule();\n        } else {\n            setTimeout(this.waitUntilModuleOnDOM, 250);\n        }\n    }\n\n    componentDidMount() {\n        if(window[this.props.moduleName]) {\n            this.runModule();\n        } else {\n            const script = document.createElement('script');\n            script.src = this.props.moduleName+\".js\";\n            document.body.appendChild(script);\n            this.waitUntilModuleOnDOM();\n        }\n    }\n\n    render() {\n        return (\n            <SimpleModal show={this.state.initialized}>\n                <div className=\"canvas-assembly-container\">\n                    <canvas ref={this.canvasRef} className=\"canvas\" onContextMenu={event => event.preventDefault()}/>\n                    <div className=\"button-container\">\n                        <button onClick={this.props.onClose}>Close</button>\n                        <button onClick={() => this.module.requestFullscreen(true, false)}>Fullscreen</button>\n                    </div>\n                </div>            \n            </SimpleModal>\n        );\n  }\n}\n\nWebAssemblyLoader.propTypes = {\n    moduleName: PropTypes.string.isRequired,\n    onClose: PropTypes.func.isRequired,\n}\n\nWebAssemblyLoader.defaultProps = {\n\n}\n\nexport default WebAssemblyLoader;\n","import React, { Component } from 'react';\nimport logo from './logo.svg';\nimport WebAssemblyLoader from './components/WebAssembly/WebAssemblyLoader';\n\nimport './App.css';\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n    this.showModule = this.showModule.bind(this);\n    this.closeModule = this.closeModule.bind(this);\n    this.state = {\n      showModule: false,\n    };\n  }\n\n  showModule() {\n    this.setState({\n      showModule: true,\n    });\n  }\n\n  closeModule() {\n    this.setState({\n      showModule: false,\n    });\n  }\n\n  render() {\n    return (\n      <div className=\"App\">\n        <header className=\"App-header\">\n          <img src={logo} className=\"App-logo\" alt=\"logo\" />\n          { this.state.showModule ? (\n            <div>\n              <WebAssemblyLoader moduleName=\"SkeletonModule\" onClose={this.closeModule}/>\n              <p>Loading...</p>\n            </div>\n          ) : (\n            <button onClick={this.showModule}>Run Module</button>\n          )}\n        </header>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.register();\n"],"sourceRoot":""}